#!/usr/bin/env ruby -wKU

require "fileutils"
require "optparse"
require "ostruct"
require "pty"

options = OpenStruct.new
options.env_vars = {}

opts_parser = OptionParser.new do |opts|
  opts.banner = "USAGE: run-test-script <app bundle> <test script> <output directory> [optional args]"

  opts.on("-d", "--device [DEVICE]", "Device UDID to run test against") do |dev|
    options.device = dev
  end

  opts.on("-e", "--environment [ENV]", "Pass variables in the form of name=value") do |env|
    key, value = env.split '='
    options.env_vars[key] = value
  end
end

unless ARGV.length >= 3
  STDERR.puts opts_parser.help
  exit 1
end

app_bundle, test_script, test_output = ARGV.shift 3

opts_parser.parse!

# Instruments wants the test_script and app_bundle to be a fully-qualified path
test_script = File.expand_path(test_script)
raise "Test script '#{test_script}' doesn't exist" unless File.exist?(test_script)
app_bundle = File.expand_path(app_bundle)
raise "App bundle '#{app_bundle}' doesn't exist" unless File.directory?(app_bundle)

SDKROOT = `/usr/bin/xcodebuild -version -sdk iphoneos | grep PlatformPath`.split(":")[1].chomp.sub(/^\s+/, "")
XCODE_ROOT = `/usr/bin/xcode-select -print-path`.chomp.sub(/^\s+/, "")

TEMPLATE = `[ -f /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/Library/Instruments/PlugIns/AutomationInstrument.bundle/Contents/Resources/Automation.tracetemplate ] && echo "#{SDKROOT}/Developer/Library/Instruments/PlugIns/AutomationInstrument.bundle/Contents/Resources/Automation.tracetemplate" || echo "#{XCODE_ROOT}/../Applications/Instruments.app/Contents/PlugIns/AutomationInstrument.bundle/Contents/Resources/Automation.tracetemplate"`.chomp.sub(/^\s+/, "")

command = ["/usr/bin/instruments"]
command << "-w" << options.device if options.device
command << "-t" << "#{TEMPLATE}"
command << app_bundle
command << "-e" << "UIASCRIPT" << test_script
command << "-e" << "UIARESULTSPATH" << test_output
options.env_vars.to_a.each do |pair|
  command << "-e"
  command.concat(pair)
end
puts "command=" + command.map { |s| s.sub(/\A(.*\s.*)\Z/, '"\1"') }.join(' ')

failed = false

unless File.directory? test_output
  FileUtils.mkdir_p test_output
end

Dir.chdir(test_output) do
  begin
    PTY.spawn(*command) do |r, w, pid|
      r.each do |line|
        puts line
        _, date, time, tz, type, msg = line.match(/^(\d{4}-\d{2}-\d{2}) (\d{2}:\d{2}:\d{2}) ([+-]\d{4}) ([^:]+): (.*)$/).to_a

        case type
        when "Fail", "Error"
          failed = true
        end
      end
    end
  rescue Errno::EIO
  rescue PTY::ChildExited => e
    STDERR.puts "Instruments exited unexpectedly"
    exit 1
  end

  if failed
    STDERR.puts "#{test_script} failed, see log output for details"
    exit 1
  else
    STDOUT.puts "TEST PASSED"
  end
end
